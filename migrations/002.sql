-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


DROP TABLE IF EXISTS public.action;

CREATE TABLE IF NOT EXISTS public.action
(
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT action_pkey PRIMARY KEY (name)
);

COMMENT ON TABLE public.action
    IS 'Действия, которые может выполнить пользователь с определённой ролью';

DROP TABLE IF EXISTS public.address;

CREATE TABLE IF NOT EXISTS public.address
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    address address_object NOT NULL,
    CONSTRAINT address_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.apartment;

CREATE TABLE IF NOT EXISTS public.apartment
(
    "number" bigint NOT NULL,
    CONSTRAINT apartment_pkey PRIMARY KEY ("number")
);

DROP TABLE IF EXISTS public.apartment_address;

CREATE TABLE IF NOT EXISTS public.apartment_address
(
    apartment_id bigint NOT NULL,
    address_id bigint NOT NULL,
    user_id bigint NOT NULL
);

DROP TABLE IF EXISTS public.file;

CREATE TABLE IF NOT EXISTS public.file
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    poll_id bigint NOT NULL,
    url character varying(500) COLLATE pg_catalog."default" NOT NULL,
    original_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT file_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.file_db;

CREATE TABLE IF NOT EXISTS public.file_db
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    poll_id bigint NOT NULL,
    filename character varying(255) COLLATE pg_catalog."default" NOT NULL,
    data bytea,
    CONSTRAINT file_db_pk PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.message;

CREATE TABLE IF NOT EXISTS public.message
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    user_id bigint NOT NULL DEFAULT 0,
    poll_id bigint NOT NULL,
    date_sent_message date NOT NULL DEFAULT CURRENT_DATE,
    message character varying(500) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT message_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.message
    IS 'сообщение в чате';

DROP TABLE IF EXISTS public.poll;

CREATE TABLE IF NOT EXISTS public.poll
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    creator_user_id bigint NOT NULL DEFAULT 0,
    poll_shedule_id bigint NOT NULL,
    adress_id bigint NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    start_date date NOT NULL,
    end_date date NOT NULL,
    duration integer NOT NULL,
    status status_enum NOT NULL DEFAULT 'proposed'::status_enum,
    number_votes bigint NOT NULL,
    description character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    cyclical boolean NOT NULL,
    max_number_answers_by_user bigint NOT NULL DEFAULT 1,
    CONSTRAINT poll_pkey PRIMARY KEY (id)
);

COMMENT ON COLUMN public.poll.number_votes
    IS 'Не используется';

DROP TABLE IF EXISTS public."poll_sсhedule";

CREATE TABLE IF NOT EXISTS public."poll_sсhedule"
(
    id bigint NOT NULL,
    type poll_type_enum NOT NULL,
    count_days bigint NOT NULL,
    CONSTRAINT "poll_sсhedule_pkey" PRIMARY KEY (id)
);

COMMENT ON TABLE public."poll_sсhedule"
    IS 'count_days - через сколько повторится опрос';

DROP TABLE IF EXISTS public.poll_value;

CREATE TABLE IF NOT EXISTS public.poll_value
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    poll_id bigint NOT NULL,
    value character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT poll_value_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.privilege;

CREATE TABLE IF NOT EXISTS public.privilege
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    system_object_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    action_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT privilege_pkey PRIMARY KEY (id),
    CONSTRAINT privilege_system_object_name_action_name_system_object_name_key UNIQUE (system_object_name, action_name)
        INCLUDE(system_object_name, action_name)
);

DROP TABLE IF EXISTS public.role;

CREATE TABLE IF NOT EXISTS public.role
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    role_name role_enum NOT NULL,
    CONSTRAINT role_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.role
    IS 'id = 1 для user';

DROP TABLE IF EXISTS public.role_privilege;

CREATE TABLE IF NOT EXISTS public.role_privilege
(
    privilege_id bigint NOT NULL,
    role_id bigint NOT NULL
);

DROP TABLE IF EXISTS public.system_object;

CREATE TABLE IF NOT EXISTS public.system_object
(
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT system_object_pkey PRIMARY KEY (name)
);

COMMENT ON TABLE public.system_object
    IS 'Объекты системы, к которым пользователь имеет доступ';

DROP TABLE IF EXISTS public.unavailable_poll_for_user;

CREATE TABLE IF NOT EXISTS public.unavailable_poll_for_user
(
    poll_id bigint NOT NULL,
    user_id bigint NOT NULL
);

COMMENT ON TABLE public.unavailable_poll_for_user
    IS 'Ограничение доступа к некоторым опросам';

DROP TABLE IF EXISTS public."user";

CREATE TABLE IF NOT EXISTS public."user"
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    address_id bigint NOT NULL,
    full_name character varying(200) COLLATE pg_catalog."default" NOT NULL,
    birth_date date NOT NULL,
    login character varying(50) COLLATE pg_catalog."default" NOT NULL,
    password character varying(500) COLLATE pg_catalog."default" NOT NULL,
    phone_number character varying(12) COLLATE pg_catalog."default" NOT NULL,
    email character varying(256) COLLATE pg_catalog."default",
    is_blocked boolean NOT NULL DEFAULT true,
    CONSTRAINT user_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public."user"
    IS 'id = 0 - для удалённого пользователя(используется в для отображения его сообщений в чате)

';

DROP TABLE IF EXISTS public.user_role;

CREATE TABLE IF NOT EXISTS public.user_role
(
    role_id bigint NOT NULL,
    user_id bigint NOT NULL
);

DROP TABLE IF EXISTS public.users_answer;

CREATE TABLE IF NOT EXISTS public.users_answer
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    user_id bigint NOT NULL,
    poll_value_id bigint NOT NULL,
    CONSTRAINT users_answer_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.apartment_address
    ADD CONSTRAINT apartment_address_address_id_fkey FOREIGN KEY (address_id)
        REFERENCES public.address (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE
        NOT VALID;


ALTER TABLE IF EXISTS public.apartment_address
    ADD CONSTRAINT apartment_address_apartment_id_fkey FOREIGN KEY (apartment_id)
        REFERENCES public.apartment ("number") MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE NO ACTION
        NOT VALID;


ALTER TABLE IF EXISTS public.apartment_address
    ADD CONSTRAINT apartment_address_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public."user" (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE NO ACTION
        NOT VALID;


ALTER TABLE IF EXISTS public.file
    ADD CONSTRAINT file_poll_id_fkey FOREIGN KEY (poll_id)
        REFERENCES public.poll (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE
        NOT VALID;


ALTER TABLE IF EXISTS public.file_db
    ADD CONSTRAINT file_db_poll_null_fk FOREIGN KEY (poll_id)
        REFERENCES public.poll (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.message
    ADD CONSTRAINT message_poll_id_fkey FOREIGN KEY (poll_id)
        REFERENCES public.poll (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.message
    ADD CONSTRAINT message_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public."user" (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE SET DEFAULT;


ALTER TABLE IF EXISTS public.poll
    ADD CONSTRAINT poll_adress_id_fkey FOREIGN KEY (adress_id)
        REFERENCES public.address (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.poll
    ADD CONSTRAINT poll_creator_user_id_fkey FOREIGN KEY (creator_user_id)
        REFERENCES public."user" (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE SET DEFAULT;


ALTER TABLE IF EXISTS public.poll
    ADD CONSTRAINT poll_poll_shedule_id_fkey FOREIGN KEY (poll_shedule_id)
        REFERENCES public."poll_sсhedule" (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.poll_value
    ADD CONSTRAINT poll_value_poll_id_fkey FOREIGN KEY (poll_id)
        REFERENCES public.poll (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE
        NOT VALID;


ALTER TABLE IF EXISTS public.privilege
    ADD CONSTRAINT privilege_action_name_fkey FOREIGN KEY (action_name)
        REFERENCES public.action (name) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID;


ALTER TABLE IF EXISTS public.privilege
    ADD CONSTRAINT privilege_system_object_name_fkey FOREIGN KEY (system_object_name)
        REFERENCES public.system_object (name) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID;


ALTER TABLE IF EXISTS public.role_privilege
    ADD CONSTRAINT privilege_role_privilege_id_fkey FOREIGN KEY (privilege_id)
        REFERENCES public.privilege (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE
        NOT VALID;


ALTER TABLE IF EXISTS public.role_privilege
    ADD CONSTRAINT privilege_role_role_id_fkey FOREIGN KEY (role_id)
        REFERENCES public.role (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE
        NOT VALID;


ALTER TABLE IF EXISTS public.unavailable_poll_for_user
    ADD CONSTRAINT unavailable_poll_for_user_poll_id_fkey FOREIGN KEY (poll_id)
        REFERENCES public.poll (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE
        NOT VALID;


ALTER TABLE IF EXISTS public.unavailable_poll_for_user
    ADD CONSTRAINT unavailable_poll_for_user_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public."user" (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE
        NOT VALID;


ALTER TABLE IF EXISTS public.user_role
    ADD CONSTRAINT role_user_role_id_fkey FOREIGN KEY (role_id)
        REFERENCES public.role (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE
        NOT VALID;


ALTER TABLE IF EXISTS public.user_role
    ADD CONSTRAINT role_user_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public."user" (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE
        NOT VALID;


ALTER TABLE IF EXISTS public.users_answer
    ADD CONSTRAINT users_answer_poll_value_id_fkey FOREIGN KEY (poll_value_id)
        REFERENCES public.poll_value (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE
        NOT VALID;


ALTER TABLE IF EXISTS public.users_answer
    ADD CONSTRAINT users_answer_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public."user" (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE
        NOT VALID;

END;